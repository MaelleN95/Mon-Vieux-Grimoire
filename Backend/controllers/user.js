const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

exports.signup = (req, res, next) => {
  bcrypt
    // Call the bcrypt hash method for the password set in the request body with 10 salt round
    .hash(req.body.password, 10)
    .then((hash) => {
      // User creation with request body email and hash
      const user = new User({
        email: req.body.email,
        password: hash,
      });

      // Save the user in the DB
      user
        .save()
        .then(() => res.status(201).json({ message: 'Utilisateur crÃ©Ã© !' }))
        .catch((error) => res.status(400).json({ error }));
    })
    .catch((error) => res.status(500).json({ error }));
};

exports.login = (req, res, next) => {
  // Check that the e-mail entered by the user exists in the DB
  User.findOne({ email: req.body.email })
    .then((user) => {
      // If this user doesn't exist, error 401
      if (!user) {
        return res
          .status(401)
          .json({ message: 'Invalid username or password' });
      }
      // If this user exist :
      // Comparison of the request password with the DB password using the bcrypt.compare method
      bcrypt
        .compare(req.body.password, user.password)
        .then((valid) => {
          // If the password isn't valid :
          if (!valid) {
            return (
              res
                .status(401)
                // Use the same message for email AND pw verification, to avoid giving the client information about the error situation !
                .json({ message: 'Invalid username or password' })
            );
          }
          res.status(200).json({
            // Return a response with the userId and a token generated by JWT
            userId: user._id,
            token: jwt.sign({ userId: user._id }, 'RANDOM_TOKEN_SECRET', {
              expiresIn: '24h',
            }),
          });
        })
        .catch((error) => res.status(500).json({ error }));
    })
    .catch((error) => res.status(500).json({ error }));
};
